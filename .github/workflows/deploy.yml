name: sync CI/CD

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  # CI
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Free up disk space on runner
        run: |
            echo "Cleaning up disk space..."
            docker system prune -af

            rm -rf /root/.gradle/caches/
            
            echo "Disk space after cleanup:"
            df -h

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application.properties
        if: github.event_name == 'push'
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
        shell: bash

      - name: Make dummy application.properties for PR
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p src/main/resources
          touch src/main/resources/application.properties

      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      - name: Set up Docker Buildx
        if: github.event_name == 'push'
        uses: docker/setup-buildx-action@v3

      - name: DockerHub Login
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, Tag, and Push Docker Image
        if: github.event_name == 'push'
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo $IMAGE_NAME > image_name.txt

      - name: Upload image name artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: image-artifact
          path: image_name.txt

  # CD
  deploy:
    needs: build
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Download image name artifact
        uses: actions/download-artifact@v4
        with:
          name: image-artifact

      - name: Read image name from artifact
        id: image
        run: echo "name=$(cat image_name.txt)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Deploy to Server via AWS SSM
        env:
          IMAGE_NAME: ${{ steps.image.outputs.name }}
          GIT_BRANCH_REF: ${{ github.ref }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          REDIS_HOST: 172.31.39.9
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          if [[ "$GIT_BRANCH_REF" == "refs/heads/main" ]]; then
            CONTAINER_NAME="sync-prod"
            PORT="8080"
          else
            CONTAINER_NAME="sync-dev"
            PORT="8081"
          fi

          COMMANDS_STRING=$(cat <<EOF
          sudo docker pull $IMAGE_NAME && \
          (sudo docker stop $CONTAINER_NAME || true) && \
          (sudo docker rm $CONTAINER_NAME || true) && \
          sudo docker run -d -p $PORT:8080 --name $CONTAINER_NAME \
          -e MONGO_URI='$MONGO_URI' \
          -e JWT_SECRET='$JWT_SECRET' \
          -e MAIL_PASSWORD='$MAIL_PASSWORD' \
          -e REDIS_HOST='$REDIS_HOST' \
          $IMAGE_NAME && \
          sudo docker image prune -f
          EOF
          )
          
          JSON_PAYLOAD=$(jq -n --arg cmd "$COMMANDS_STRING" '{ "commands": [$cmd] }')
          
          echo "Sending command to EC2 instance..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --query "Command.CommandId" \
            --output text \
            --timeout-seconds 600 \
            --parameters "$JSON_PAYLOAD")

          echo "Command sent with ID: $COMMAND_ID"
          echo "Waiting for command to complete..."
          
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$EC2_INSTANCE_ID" \
              --query "Status" \
              --output text)
          
            if [[ "$STATUS" == "Success" ]]; then
              echo "✅ Command executed successfully."
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "❌ Command failed with status: $STATUS"
              aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "$EC2_INSTANCE_ID"
              exit 1
            fi
          
            echo "Current status: $STATUS. Waiting... ($i/60)"
            sleep 10
          done
          
          if [[ "$STATUS" != "Success" ]]; then
            echo "⏱️ Timeout waiting for deployment."
            exit 1
          fi
          
          echo "Command finished. Fetching output..."
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$EC2_INSTANCE_ID"